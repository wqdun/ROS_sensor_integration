<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<!--script src="https://static.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js"></script-->
<script src="../build/eventemitter2.min.js"></script>
<script src="../build/roslib.js"></script>

<script>
  // Connecting to ROS
  // -----------------
  var ros = new ROSLIB.Ros();

  // If there is an error on the backend, an 'error' emit will be emitted.
  ros.on('error', function(error) {
    document.getElementById('connecting').style.display = 'none';
    document.getElementById('connected').style.display = 'none';
    document.getElementById('closed').style.display = 'none';
    document.getElementById('error').style.display = 'inline';
    console.log(error);
  });

  // Find out exactly when we made a connection.
  ros.on('connection', function() {
    console.log('Connection made!');
    document.getElementById('connecting').style.display = 'none';
    document.getElementById('error').style.display = 'none';
    document.getElementById('closed').style.display = 'none';
    document.getElementById('connected').style.display = 'inline';
  });

  ros.on('close', function() {
    console.log('Connection closed.');
    document.getElementById('connecting').style.display = 'none';
    document.getElementById('connected').style.display = 'none';
    document.getElementById('closed').style.display = 'inline';
  });

  // Create a connection to the rosbridge WebSocket server.
  ros.connect('ws://172.21.13.252:9090');

  // Publishing a Topic

  // First, we create a Topic object with details of the topic's name and message type.
  var cmdVel = new ROSLIB.Topic({
    ros : ros,
    name : '/sc_client_cmd',
    messageType : 'SmartCollector/clientCmd'
  });

  // Then we create the payload to be published. The object we pass in to ros.Message matches the
  // fields defined in the geometry_msgs/Twist.msg definition.
  var twist = new ROSLIB.Message({
  is_record: 1,
    password: '123',
    cam_gain: 1.23
});

  // And finally, publish.
  cmdVel.publish(twist);

  // Subscribing to a Topic
  // Like when publishing a topic, we first create a Topic object with details of the topic's name
  // and message type. Note that we can call publish or subscribe on the same topic object.
  var serverListener = new ROSLIB.Topic({
    ros : ros,
    name : '/sc_server2client',
    messageType : 'sc_server_daemon/serverMsg'
  });

  // Then we add a callback to be called every time a message is published on this topic.
  serverListener.subscribe(function(message) {
    console.log('Received message on ' + serverListener.name + ': ' + message.//data);
        is_server_connected);
    document.getElementById('console').innerHTML = "<font color=red >" + serverListener.name + ': ' + message.is_server_connected + "</font>";
    // If desired, we can unsubscribe from the topic as well.
    // serverListener.unsubscribe();
  });

  // Subscribe imu_string
  var imuStringListener = new ROSLIB.Topic({
    ros : ros,
    name : '/imu_string',
    messageType : 'roscameragpsimg/imu5651'
  });
  imuStringListener.subscribe(function(message) {
    console.log(imuStringListener.name + '::GPSTime: ' + message.GPSTime);
  });


  // Setting a param value

  ros.getParams(function(params) {
    console.log(params);
  });

  // First, we create a Param object with the name of the param.
  var maxVelX = new ROSLIB.Param({
    ros : ros,
    name : 'max_vel_y'
  });

  //Then we set the value of the param, which is sent to the ROS Parameter Server.
  maxVelX.set(0.8);
  maxVelX.get(function(value) {
    console.log('MAX VAL: ' + value);
  });

  // Getting a param value
  // ---------------------

  var favoriteColor = new ROSLIB.Param({
    ros : ros,
    name : 'favorite_color'
  });

  favoriteColor.set('red');
  favoriteColor.get(function(value) {
    console.log('My robot\'s favorite color is ' + value);
  });
</script>
</head>

<body>
  <h1>Simple roslib Example</h1>
  <p>Run the following commands in the terminal then refresh this page. Check the JavaScript
    console for the output.</p>
  <ol>
    <li><tt>roscore</tt></li>
    <li><tt>rostopic pub /serverListener std_msgs/String "Hello, World"</tt></li>
    <li><tt>rostopic echo /cmd_vel</tt></li>
    <li><tt>rosrun rospy_tutorials add_two_ints_server</tt></li>
    <li><tt>roslaunch rosbridge_server rosbridge_websocket.launch</tt></li>
  </ol>
  <div id="statusIndicator">
    <p id="connecting">
      Connecting to rosbridge...
    </p>
    <p id="connected" style="color:#00D600; display:none">
      Connected
    </p>
    <p id="error" style="color:#FF0000; display:none">
      Error in the backend!
    </p>
    <p id="closed" style="display:none">
      Connection closed.
    </p>
    <p id="console" >
      Console status.
    </p>
  </div>
</body>
</html>
